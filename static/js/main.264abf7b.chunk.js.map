{"version":3,"sources":["components/Wrapper/index.js","components/PictureCard/index.js","components/Score/index.js","App.js","index.js"],"names":["Wrapper","props","className","children","PictureCard","id","onClick","handleClick","bind","this","alt","name","src","image","Score","type","score","shuffle","require","App","state","pictures","currentScore","topScore","selectedCards","navDisplayText","checkTopScore","setState","componentDidUpdate","correctGuess","event","push","target","preventDefault","selectedCardsArray","length","includes","map","picture","index","key","Component","ReactDOM","render","document","getElementById"],"mappings":"0jEAOiBA,MAJjB,SAAiBC,GACb,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,MCS5BC,MAVf,SAAqBH,GACjB,OACI,yBAAKC,UAAU,OAAOG,GAAIJ,EAAMI,IAC5B,yBAAKH,UAAU,iBACX,4BAAQI,QAASL,EAAMM,YAAYC,KAAKC,OAAO,yBAAKJ,GAAIJ,EAAMI,GAAIK,IAAKT,EAAMU,KAAMC,IAAKX,EAAMY,Y,MCK/FC,MARf,SAAeb,GACX,OACI,yBAAKC,UAAU,SACdD,EAAMc,KADP,KACed,EAAMe,Q,OCCzBC,EAAUC,EAAQ,IAoHPC,E,4MAjHbC,MAAQ,CACNC,SAAUA,EACVC,aAAc,EACdC,SAAU,EACVC,cAAe,GACfC,eAAgB,4B,EAIlBC,cAAgB,WACV,EAAKN,MAAME,aAAe,EAAKF,MAAMG,UACvC,EAAKI,SAAS,CACZJ,SAAU,EAAKH,MAAME,gB,EAM3BM,mBAAqB,WACnB,EAAKF,iB,EAMPG,aAAe,SAACC,GACd,EAAKV,MAAMI,cAAcO,KAAKD,EAAME,OAAO3B,IAE3CY,EAAQI,GAEwB,KAA5B,EAAKD,MAAME,aACb,EAAKK,SAAS,CACZL,aAAc,EACdC,SAAU,GACVC,cAAe,GACfC,eAAgB,4BAChBJ,SAAUA,IAGZ,EAAKM,SAAS,CACZL,aAAc,EAAKF,MAAME,aAAe,EACxCG,eAAgB,4BAChBJ,SAAUA,K,EAQhBd,YAAc,SAACuB,GACbA,EAAMG,iBACN,IAAIC,EAAqB,EAAKd,MAAMI,cAEhC,EAAKJ,MAAMI,cAAcW,OAAS,GAChCD,EAAmBE,SAASN,EAAME,OAAO3B,IAC3C,EAAKsB,SAAS,CACZL,aAAc,EACdE,cAAe,GACfC,eAAgB,qDAMpB,EAAKI,aAAaC,I,uDAIZ,IAAD,OACP,OACE,6BACE,yBAAK5B,UAAU,qBACb,0BAAMA,UAAU,uBAAuBG,GAAG,QAA1C,eAGA,0BAAMH,UAAU,eAAeO,KAAKW,MAAMK,gBAC1C,0BAAMvB,UAAU,eACd,kBAAC,EAAD,CAAOa,KAAK,aAAaC,MAAOP,KAAKW,MAAME,eAAuB,IAClE,6BAAU,IACV,kBAAC,EAAD,CAAOP,KAAK,YAAYC,MAAOP,KAAKW,MAAMG,aAI9C,yBAAKrB,UAAU,6BACb,yBAAKA,UAAU,yBACb,uBAAGA,UAAU,QAAb,8EAOJ,kBAAC,EAAD,KACGO,KAAKW,MAAMC,SAASgB,KAAI,SAACC,EAASC,GAAV,OACvB,kBAAC,EAAD,CACEC,IAAKD,EACLlC,GAAIiC,EAAQjC,GACZM,KAAM2B,EAAQ3B,KACdE,MAAOyB,EAAQzB,MACfN,YAAa,EAAKA,kBAKxB,yBAAKL,UAAU,uBACb,0BAAMG,GAAG,eAAT,qB,GA3GQoC,aCJlBC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.264abf7b.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"wrapper\">{props.children}</div>;\n  }\n  \n  export default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction PictureCard(props) {\n    return (\n        <div className=\"card\" id={props.id}>\n            <div className=\"img-container\">\n                <button onClick={props.handleClick.bind(this)}><img id={props.id} alt={props.name} src={props.image} /></button>\n            </div>\n        </div>\n    );\n};\n\nexport default PictureCard;\n","import React from \"react\";\nimport \"./style.css\";\n\n\nfunction Score(props) {\n    return (\n        <div className=\"score\">\n        {props.type}: {props.score}\n        </div>\n    );\n};\n\nexport default Score;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Wrapper from \"./components/Wrapper\";\nimport PictureCard from \"./components/PictureCard\";\nimport Score from \"./components/Score\";\nimport pictures from \"./pictures.json\";\n\nvar shuffle = require(\"shuffle-array\");\n\nclass App extends Component {\n  state = {\n    pictures: pictures,\n    currentScore: 0,\n    topScore: 0,\n    selectedCards: [],\n    navDisplayText: \"Click an image to begin!\",\n  };\n\n  // function to check the state: if top score is less than current score, top score will be set equal to current score\n  checkTopScore = () => {\n    if (this.state.currentScore > this.state.topScore) {\n      this.setState({\n        topScore: this.state.currentScore,\n      });\n    }\n  };\n\n  // function to set top score at the end of each click event/guess\n  componentDidUpdate = () => {\n    this.checkTopScore();\n  };\n\n  // function to update state if the current guess has not been previously guessed in the current game\n  // this function pushes the current guess id to the selected cards array, shuffles the picture array,\n  // and checks to see if the guess is the final one to win the game (if all 12 pictures are guessed without any repeats)\n  correctGuess = (event) => {\n    this.state.selectedCards.push(event.target.id);\n\n    shuffle(pictures);\n\n    if (this.state.currentScore === 11) {\n      this.setState({\n        currentScore: 0,\n        topScore: 12,\n        selectedCards: [],\n        navDisplayText: \"Congratulations, you won!\",\n        pictures: pictures,\n      });\n    } else {\n      this.setState({\n        currentScore: this.state.currentScore + 1,\n        navDisplayText: \"You've guessed correctly!\",\n        pictures: pictures,\n      });\n    }\n  };\n\n  // click event function for each image in the game.  \n  // Once clicked, checks to see if image has already been guessed in current game.\n  // If it has, the game is reset. If now, runs the correctGuess function\n  handleClick = (event) => {\n    event.preventDefault();\n    var selectedCardsArray = this.state.selectedCards;\n\n    if (this.state.selectedCards.length > 0) {\n      if (selectedCardsArray.includes(event.target.id)) {\n        this.setState({\n          currentScore: 0,\n          selectedCards: [],\n          navDisplayText: \"You've guessed incorrectly! Game has been reset!\",\n        });\n      } else {\n        this.correctGuess(event);\n      }\n    } else {\n      this.correctGuess(event);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar sticky-top\">\n          <span className=\"navbar-brand mb-0 h1\" id=\"logo\">\n            Clicky Game\n          </span>\n          <span className=\"navbar-text\">{this.state.navDisplayText}</span>\n          <span className=\"navbar-text\">\n            <Score type=\"Your Score\" score={this.state.currentScore}></Score>{\" \"}\n            <br></br>{\" \"}\n            <Score type=\"Top Score\" score={this.state.topScore}></Score>\n          </span>\n        </nav>\n\n        <div className=\"jumbotron jumbotron-fluid\">\n          <div className=\"container text-center\">\n            <p className=\"lead\">\n              Click on an image to earn points, but don't click on any more than\n              once!\n            </p>\n          </div>\n        </div>\n\n        <Wrapper>\n          {this.state.pictures.map((picture, index) => (\n            <PictureCard\n              key={index}\n              id={picture.id}\n              name={picture.name}\n              image={picture.image}\n              handleClick={this.handleClick}\n            />\n          ))}\n        </Wrapper>\n\n        <nav className=\"navbar fixed-bottom\">\n          <span id=\"footer-text\">Clicky Game</span>\n        </nav>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}